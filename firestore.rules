rules_version = '2';

function isUserItem(userRef, userId) {
  return path('/databases/(default)/documents/wecount/app/users/' + userId) == userRef;
}

service cloud.firestore {
  match /databases/{database}/documents/wecount {
    match /app/{document=**} {
      match /users/{userID} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == userID;
        allow update: if (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followerCount', 'followingCount']));

        match /followers/{followerID} {
          allow read: if true;
          allow write: if request.auth != null && request.auth.uid == followerID;
        }

        match /followings/{followerId} {
          allow read: if true;
          allow write: if request.auth != null && request.auth.uid == userID;
        }

        match /subscribing/{subscribingId} {
          allow read, write: if request.auth != null && request.auth.uid == userID;
        }

        match /banned/{userId} {
          allow read, write: if request.auth != null && request.auth.uid == userID;
        }

        match /communities/{communityId} {
          allow read, write: if request.auth != null && request.auth.uid == userID;
        }

        match /likes/{likeId} {
        	allow read, write: if request.auth != null && request.auth.uid == userID;
        }

        match /dislikes/{likeId} {
          allow read, write: if request.auth != null && request.auth.uid == userID;
        }
      }

      match /communities/{communityId} {
        allow read: if true;
        allow update, delete: if request.auth != null;
        allow create: if request.auth != null;

        match /members/{userID} {
          allow read: if true;
          allow write: if request.auth != null && request.auth.uid == userID;
        }
      }

      match /feeds/{feedId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount', 'dislikeCount', 'replyCount', 'viewCount']));
        allow write: if request.auth != null && isUserItem(resource.data.writerRef, request.auth.uid);

        match /likes/{userID} {
          allow read: if true;
          allow write: if request.auth != null && request.auth.uid == userID;
        }

        match /dislikes/{userID} {
          allow read: if true;
          allow write: if request.auth != null && request.auth.uid == userID;
        }
      }

      match /replies/{replyID} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && isUserItem(resource.data.writerRef, request.auth.uid)
        allow update: if (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount', 'dislikeCount', 'replyCount', 'viewCount']));

        match /likes/{userID} {
          allow read: if true;
          allow write: if request.auth != null && request.auth.uid == userID;
        }

        match /dislikes/{userID} {
          allow read: if true;
          allow write: if request.auth != null && request.auth.uid == userID;
        }
      }

      match /reports/{replyID} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && isUserItem(resource.data.userRef, request.auth.uid)
      }
    }
  }
}
